#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Extracts i18n msgid strings from the csv workflow definitions, which are
# defined in the directory bika.lims/bika/lims/profiles/default/workflow_csv
#
# Help: Please insert the output to "bika/lims/locales/plone-manual.pot""

import re
import os
import sys
import csv
import glob
import optparse


def get_csv_files_from(directory):
    if not os.path.exists(directory):
        raise IOError("Directory %s does not exist" % directory)
    return glob.glob(os.path.join(directory, "*.csv"))


def parse_csv_files_from(directory):
    """Parse all CSV Workflow definitions from the directory and return a
       dictionary of the following format:

       out = {
           "[State]": {
               "Open": ["bika/lims/profiles/default/workflow_csv/bika_batch_workflow.csv", ...]
               "Registered": ["bika/lims/profiles/default/workflow_csv/bika_sample_workflow.csv", ...]
               ...
           }
       }
    """
    out = {}

    for csv_file_path in get_csv_files_from(directory):
        f = open(csv_file_path)
        reader = csv.reader(f)

        section = None
        for row in reader:
            # remember the section, e.g. "[State]"
            if re.match("\[.*\]", row[0]):
                section = row[0]

            # continue unless we have a section
            if not section:
                continue

            # append the section to the dictionary
            if section not in out:
                out[section] = {}

            # we are only interested in the title
            if "Title:" in row:
                title = row[1]

                # only continue if we have a title
                if not title:
                    continue

                # we have a title in a section, append it to the dict
                if title not in out[section]:
                    out[section][title] = [csv_file_path]
                else:
                    out[section][title].append(csv_file_path)
    return out


if __name__ == "__main__":

    parser = optparse.OptionParser()

    parser.add_option('-d', '--directory',
                      dest='directory',
                      default='${buildout:directory}/bika/lims/profiles/default/workflow_csv',
                      help='Directory where the workflows are defined in CSV format [default: %default]')

    parser.add_option('-s', '--section',
                      dest='section',
                      default='[State]',
                      help='Return the msgids from the given section [default: %default]')

    options, args = parser.parse_args(sys.argv)

    directory = options.directory
    section = options.section

    out = parse_csv_files_from(directory)

    for k, v in out.get(section).iteritems():
        for f in sorted(v):
            print "# %s" % f
        print 'msgid "%s"' % k
        print 'msgstr ""'
        print ""
