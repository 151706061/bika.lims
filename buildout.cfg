# This buildout can be used to obtain a complete test system from scratch:
#
#    virtualevnv .
#    bin/pip install zc.buildout
#    bin/buildout
#
#    To start Plone:
#
#        bin/zeoserver start
#        bin/zeoclient start
#
#    To run tests:
#
#        bin/test -m bika.lims

[buildout]
extends = http://dist.plone.org/release/4.3.4/versions.cfg
versions = versions
develop = .

zeoserver-address = 8100
zeoclient-address = 8080
user = admin:adminsecret

parts =
    zeoserver
    zeoclient
    lxml
    omelette
    test
    robot

eggs =
    Plone
    Pillow
    bika.lims
    i18ndude
    lxml

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeoserver-address}
var = ${buildout:directory}/var
blob-storage = ${buildout:directory}/var/blobstorage
zserver-threads = 4
zeo-log     = ${buildout:directory}/var/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver.pid
socket-name = ${buildout:directory}/var/zeo.zdsock

[zeoclient]
recipe = plone.recipe.zope2instance
var = ${buildout:directory}/var
blob-storage = var/blobstorage
zeo-address = ${buildout:zeoserver-address}
http-address = ${buildout:zeoclient-address}
user = ${buildout:user}
resources = ${buildout:directory}/resources
locales = ${buildout:directory}/locales
eggs = ${buildout:eggs}
zeo-client = true
shared-blob = on
http-fast-listen = off
event-log = ${buildout:directory}/var/zeoclient-event.log
z2-log    = ${buildout:directory}/var/zeoclient-Z2.log
pid-file  = ${buildout:directory}/var/zeoclient.pid
lock-file = ${buildout:directory}/var/zeoclient.lock

[update_translations]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/update_translations
input = inline:
    #!/bin/sh
    ######
    # This file is automatically generated by buildout using a template in
    # bika.lims/buildout.cfg.  It will be overwritten each time buildout
    # is run.
    ######
    I18NDUDE=${buildout:directory}/bin/i18ndude
    LOCALES=${buildout:directory}/src/bika.lims/bika/lims/locales
    cd $LOCALES
    ###### always pull all translations from transifex.
    echo run \"tx pull -a -f\" before executing this script!
    #tx pull -a -f
    ###### bika domain ######
    ###### Flush the english (transifex source language) po files
    ###### If we don't do this, new bika-manual.pot translations won't be synced.
    > en/LC_MESSAGES/bika.po
    ###### Re-scan source for new strings
    $I18NDUDE rebuild-pot -p bika-tmp.pot -c bika ${buildout:directory}/src/bika.lims
    ###### add manual translations (overrides)
    $I18NDUDE trmerge bika-tmp.pot bika-manual.pot > bika.pot
    rm bika-tmp.pot
    ###### sync
    $I18NDUDE sync --pot bika.pot */LC_MESSAGES/bika.po
    ###### plone domain ######
    ###### Flush the english (transifex source language) po files
    ###### If we don't do this, new bika-manual.pot translations won't be synced.
    > en/LC_MESSAGES/plone.po
    ###### Re-scan source for new strings
    $I18NDUDE rebuild-pot --pot plone-tmp.pot --create plone ${buildout:directory}/src/bika.lims/bika/lims/profiles
    ###### filter out messages that are already translated
    $I18NDUDE filter plone-tmp.pot ${buildout:directory}/parts/omelette/plone/app/locales/locales/plone.pot > plone-tmp2.pot
    ###### add manual translations (overrides)
    $I18NDUDE trmerge plone.pot plone-manual.pot > plone-tmp.pot
    mv plone-tmp.pot plone.pot
    rm plone-tmp2.pot
    ###### sync
    $I18NDUDE sync --pot plone.pot */LC_MESSAGES/plone.po
    find . -name "*.mo" -delete
    for po in `find . -name "*.po"`; do
        msgfmt -o `dirname $po`/`basename $po .po`.mo $po;
    done
    ###### Transifex
    echo run \"tx push -s -t\" if everything went smoothly.
mode = 755

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml==2.3.6
force = false
static-build = true

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    Plone
    Pillow
    bika.lims [test]

[robot]
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    plone.app.robotframework

[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}

[versions]
zc.buildout=2.3.1
setuptools=18.0.1
