from AccessControl import ModuleSecurityInfo
from DateTime import DateTime
from Products.CMFCore.WorkflowCore import WorkflowException
from Products.CMFCore.utils import getToolByName
from bika.lims import bikaMessageFactory as _
from Products.Archetypes.utils import shasattr
from bika.lims import logger
from bika.lims.utils import generateUniqueId
import transaction

ModuleSecurityInfo('bika.lims.subscribers.objectinitialized').declarePublic('applyVersionControl')
def applyVersionControl(obj, event):
    """ Apply version control to IHistoryAware objects
    """
    pr = getToolByName(obj, 'portal_repository')
    pr.applyVersionControl(obj, comment=_("Initial revision"))

ModuleSecurityInfo('bika.lims.subscribers.objectinitialized').declarePublic('generateUniqueId_rename')
def generateUniqueId_rename(obj, event):
    """ On first save this function is used
        to generate a new ID for the object
        and rename the object.
        (processForm)
    """

    # abort if object id is already non-plone-default
    plone_tool = getToolByName(obj, 'plone_utils', None)
    if not plone_tool.isIDAutoGenerated(obj.getId()):
        return

    # Can't rename without a subtransaction commit when using portal_factory
    transaction.savepoint(optimistic=True)

    new_id = generateUniqueId(obj)
    old_id = obj.id
    obj.aq_parent.manage_renameObject(old_id, new_id)
