#!/usr/bin/env python
"""

Buildout template for regenerating translations catalogs and keeping locale
folders up-to-date.

***

### Edit buildout.cfg:

```
    parts =
        ...
        update_translations
        i118ndude

    [update_translations]
    recipe = collective.recipe.template
    output = ${buildout:directory}/bin/update_translations
    input = ${buildout:directory}/src/bika.lims/bika/lims/locales/update_translations.in
    mode = 755
    locale_folders =
        [
            {
                "repo_path": The path to the source that is to be scanned for new messages,
                "domains": A list of domain names to be created/updated,
                "locales_path": The path of the source repository's locales folder,
                "profiles_path": The path of the souce repository's profiles folder,
                "extends": A path to search for BASE translation file, for each domain, which will be extended,
            },
            {
                "repo_path": "${buildout:directory}/src/bika.lims",
                "domains": ["bika", "plone"],
                "locales_path": "${buildout:directory}/src/bika.lims/bika/lims/locales",
                "profiles_path": "${buildout:directory}/src/bika.lims/bika/lims/profiles",
                "extends": "${buildout:directory}/parts/omelette/plone/app/locales/locales",
            },
            {
                "repo_path": "${buildout:directory}/src/bika.wine",
                "domains": ["bika", "bika.wine", "plone"],
                "locales_path": "${buildout:directory}/src/bika.wine/bika/wine/locales",
                "profiles_path": "${buildout:directory}/src/bika.wine/bika/wine/profiles",
                "extends": "${buildout:directory}/src/bika.lims/bika/lims/locales",
            },
        ]

    [i18ndude]
    unzip = true
    recipe = zc.recipe.egg
    eggs = i18ndude
```

run bin/buildout after updating buildout.cfg

### Regenerate translations

    bin/update_translations

"""

from commands import getoutput
from glob import glob
from os.path import join as j
import json
import os
import sys
import subprocess as subp

# First list the locales folders that will be built by this script:
locale_folders = ${locale_folders}

i18ndude = "${buildout:directory}/bin/i18ndude"

def call(cmd_str, prn_cmd=True, prn_out=True, pause=False, success_codes=[0,]):
    if prn_cmd:
        print(">>> " + cmd_str)
    if pause:
        raw_input()
    cmd = cmd_str.split()
    proc = subp.Popen(cmd, stdout=subp.PIPE)
    out = proc.communicate()[0]
    rc = proc.returncode
    if rc not in success_codes:
        raise Exception("Failure, return code %s"%rc)

    lines = out.rstrip().split('\n')
    l = [line for line in lines if line]
    if l and prn_out:
        print("\n".join(l))
    return (rc, "\n".join(lines))

def which(executable):
    """
    Finds executable in PATH environment variable
    """
    for dirname in os.environ['PATH'].split(os.path.pathsep):
        trypath = os.path.join(dirname, executable)
        if os.path.isfile(trypath) and os.access(trypath, os.X_OK):
            return trypath

msgfmt = which('msgfmt')
if not msgfmt:
    raise Exception('msgfmt executable not found on your $PATH.  Install gettext.')
msgcat = which('msgcat')
if not msgcat:
    raise Exception('msgcat executable not found on your $PATH.  Install gettext.')

for locale_folder in locale_folders:
    print
    print "=" * 50
    print locale_folder["repo_path"]
    print

    repo_path = locale_folder["repo_path"]
    locales_path = locale_folder["locales_path"]
    profiles_path = locale_folder["profiles_path"]
    extends = locale_folder.get("extends", False)
    domains = locale_folder.get("domains")

    os.chdir(locales_path)

    ### Transifex - pull everything
    if os.path.exists(".tx"):
        print "Y to run `tx pull -a -f` else just hit enter"
        if raw_input().strip().lower() == 'y':
            call("tx pull -a -f")

    ### Each potfile is a domain, unless it has "-" in the filename.
    for domain in domains:
        print "-"*25
        print domain

        pot = domain + ".pot"

        extends_pot = j(extends, pot)
        extends_pot = extends_pot if os.path.exists(extends_pot) else ""

        manual_pot = j(locales_path, domain + "-manual.pot")
        manual_pot = manual_pot if os.path.exists(manual_pot) else ""

        tmp_pot = j(locales_path, domain + "-tmp.pot")

        # plone domain is special.  Only search for strings in profiles folder.
        path = profiles_path if domain == "plone" else repo_path

        ### Re-scan source for new strings (into *-tmp.pot)
        call("{i18ndude} rebuild-pot --pot {tmp_pot}  --exclude 'build' --create {domain} {path}".format(**locals()))
        if not os.path.exists(tmp_pot):
            tmp_pot = ""
        lines = call("{msgcat} -n --strict --use-first {manual_pot} {tmp_pot} {extends_pot}".format(**locals()), prn_out=False)[1]
        open(pot, "w").write(lines)
        if tmp_pot:
            os.remove(tmp_pot)

        ### sync
        print ">>> running 'i18ndude sync' and 'msgfmt' for all languages"
        for lang in glob(j(locales_path, "*")):
            if os.path.exists(j(locales_path, lang, "LC_MESSAGES")):
                mo = j(lang, "LC_MESSAGES", domain + ".mo")
                po = j(lang, "LC_MESSAGES", domain + ".po")
                call("{i18ndude} sync --pot {pot} {po}".format(**locals()), prn_cmd=False)
                call("{msgfmt} -f -o {mo} {po}".format(**locals()), prn_cmd=False)

    ### Transifex - pull everything
    if os.path.exists(".tx"):
        print "Y to run `tx push -s -t` else just hit enter"
        if raw_input().strip().lower() == 'y':
            call("tx push -s -t")
